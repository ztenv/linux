#include "StringSplit.h"

class printer
{
public:
    void operator ()(const char *value)
    {
        cout<<value<<endl;
    }
};

class printer2
{
public:
    printer2():i(0)
    {
    }
    void operator ()(const char *value)
    {
        cout<<++i<<"#"<<value<<endl;
    }
private:
    int i;
};

void printer3(const char * v)
{
    cout<<"print:"<<v<<endl;
}

class test
{
public:
    void operator()(const char *value)
    {
    }
};

int main(int argc,char *argv[])
{
    {
        cout<<"1_________________________________________________"<<endl;
        std::string s(",aa,bb,cc,dd,");
        printer2 p;
        StringHelper::split(s,p);
    }

    {
        cout<<"2_________________________________________________"<<endl;
        std::string s(",aa,bb,cc,dd,,,ee,");
        StringHelper::split(s,printer2());
    }

    {
        cout<<"3_________________________________________________"<<endl;
        std::string s("||||||aa||bb||||dd||||");
        printer2 p;
        StringHelper::split(s,p,"||");
        StringHelper::split(s,printer3,"||");
    }

    {
        cout<<"4_________________________________________________"<<endl;
        std::string s("||,||,||aa||bb||||dd||||");
        StringHelper::split(s,printer2(),"||");
    }

    {
        cout<<"5_________________________________________________"<<endl;
        std::string s("");
        StringHelper::split(s,printer2(),NULL);
    }

    {
        cout<<"6_________________________________________________"<<endl;
        std::string s("||||||aa||bb||||dd||||");
        StringHelper::split(s,printer3,"||");
    }

    {
        cout<<"7_________________________________________________"<<endl;
        std::string s("1||2|3|4||aa||bb||||dd||||");
        std::vector<std::string> result;
        StringHelper::split(s,result,"||");
        for(size_t i=0;i<result.size();++i)
        {
            cout<<result[i]<<endl;
        }
    }

    {
        std::string s("11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,11,22,33,44,55,66,77,88,99,");
        std::vector<std::string> result;
        test t;
        result.reserve(s.length());
        for(int i=0;i<100000;++i)
        {
            {
                StringHelper::split(s,t);
            }
            {
                //性能不高的做法，与上面的差10倍之多
                //StringHelper::split(s,result);
                //result.clear();
            }
        }

    }
}


